// <auto-generated />
using System;
using FlashcardCreator.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlashcardCreator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210927170113_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonetic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Word", "GroupId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.CardGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Editable")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShare")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("CardGroups");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.UserCardGroups", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCardGroups");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.UserCardReview", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LearnedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesLearned")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CardId");

                    b.HasIndex("CardId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserCardReviews");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.Card", b =>
                {
                    b.HasOne("FlashcardCreator.Domain.Entities.CardGroup", "CardGroup")
                        .WithMany("Cards")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardGroup");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.CardGroup", b =>
                {
                    b.HasOne("FlashcardCreator.Domain.Entities.User", "User")
                        .WithMany("CardGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.UserCardGroups", b =>
                {
                    b.HasOne("FlashcardCreator.Domain.Entities.CardGroup", "CardGroup")
                        .WithMany("UserCardGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardCreator.Domain.Entities.User", "User")
                        .WithMany("UserCardGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.UserCardReview", b =>
                {
                    b.HasOne("FlashcardCreator.Domain.Entities.Card", "Card")
                        .WithMany("UserCardReviews")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlashcardCreator.Domain.Entities.CardGroup", "CardGroup")
                        .WithMany("UserCardReviews")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardCreator.Domain.Entities.User", "User")
                        .WithMany("UserCardReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("CardGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("FlashcardCreator.Domain.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.Card", b =>
                {
                    b.Navigation("UserCardReviews");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.CardGroup", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("UserCardGroups");

                    b.Navigation("UserCardReviews");
                });

            modelBuilder.Entity("FlashcardCreator.Domain.Entities.User", b =>
                {
                    b.Navigation("CardGroups");

                    b.Navigation("UserCardGroups");

                    b.Navigation("UserCardReviews");

                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
